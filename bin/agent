#!/usr/bin/env bash
set -euo pipefail

# Manage containers ("agents") for the ai_agent image
# Usage:
#   bin/agent --list
#   bin/agent --new [OPTIONAL_NAME]
#   bin/agent --select NAME
#
# Behavior:
# - Tracks the currently selected agent name in repo-root file .agent-selected
# - --list shows all containers created from the current image, marks selected
# - --new creates a new agent (name optional). It selects it and initializes it
#   by invoking bin/run with a no-op command so the container is created.
# - --select sets the selected agent; creation is deferred until next bin/run

SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
REPO_ROOT="${SCRIPT_DIR%/bin}"
SELECT_FILE="$REPO_ROOT/.agent-selected"

IMAGE_TAG="ai_agent"
WORKDIR="/var/www/discourse"

show_help() {
  cat << EOF
Usage: bin/agent [OPTIONS]

Manage ai_agent Docker containers (agents)

OPTIONS:
  --help           Show this help message
  --list           List containers created from the current image
  --new [NAME]     Create a new agent with optional NAME and select it
  --select NAME    Select an existing (or future) agent by NAME

Examples:
  bin/agent --list
  bin/agent --new                 # auto-generate name, create, and select
  bin/agent --new my_project      # create named agent and select
  bin/agent --select my_project   # select an existing agent
EOF
}

get_selected() {
  if [[ -f "$SELECT_FILE" ]]; then
    # Trim whitespace
    tr -d '\n' <"$SELECT_FILE" | tr -d '\r'
  else
    echo ""
  fi
}

set_selected() {
  local name="$1"
  printf '%s' "$name" >"$SELECT_FILE"
}

container_exists() {
  local name="$1"
  [[ -n "$(docker ps -aq -f name="^${name}$")" ]]
}

container_uses_image() {
  local name="$1"
  local image
  image="$(docker inspect -f '{{.Config.Image}}' "$name" 2>/dev/null || true)"
  [[ "$image" == "$IMAGE_TAG" ]]
}

list_agents() {
  local selected
  selected="$(get_selected)"
  # List all containers whose ancestor is the current image
  # Show name, status, and mark selected with '*'
  docker ps -a --filter "ancestor=$IMAGE_TAG" --format '{{.Names}}\t{{.Status}}' | (
    had_output=false
    while IFS=$'\t' read -r name status; do
      had_output=true
      mark=" "
      if [[ -n "$selected" && "$name" == "$selected" ]]; then
        mark="*"
      fi
      printf '%s %s\t%s\n' "$mark" "$name" "$status"
    done
    if ! $had_output; then
      echo "(no agents found for image '$IMAGE_TAG')"
    fi
  )
  if [[ -n "$selected" ]]; then
    echo "Selected: $selected"
  else
    echo "Selected: (none)"
  fi
}

autogen_name() {
  # Generate a reasonably unique name using date-time
  printf 'ai_agent_%s' "$(date +%Y%m%d-%H%M%S)"
}

create_new_agent() {
  local name="$1"
  if container_exists "$name"; then
    echo "Error: An agent named '$name' already exists." >&2
    exit 1
  fi
  # Select it first, then initialize via bin/run with a no-op command
  set_selected "$name"
  echo "Creating agent '$name' from image '$IMAGE_TAG'..."
  # Use bin/run to ensure consistent startup behavior
  "$SCRIPT_DIR/run" true >/dev/null 2>&1 || true
  echo "Agent '$name' is ready and selected."
}

if [[ $# -eq 0 ]]; then
  show_help
  exit 0
fi

case "${1:-}" in
  --help|-h)
    show_help
    ;;
  --list)
    list_agents
    ;;
  --new)
    shift || true
    new_name="${1:-}"
    if [[ -n "${new_name}" && "${new_name}" != --* ]]; then
      :
    else
      new_name="$(autogen_name)"
    fi
    create_new_agent "$new_name"
    ;;
  --select)
    shift || true
    if [[ $# -lt 1 ]]; then
      echo "Error: --select requires a NAME" >&2
      exit 1
    fi
    name="$1"
    if container_exists "$name" && ! container_uses_image "$name"; then
      echo "Error: Container '$name' exists but does not use image '$IMAGE_TAG'" >&2
      exit 1
    fi
    set_selected "$name"
    echo "Selected agent: $name"
    ;;
  *)
    echo "Unknown option: $1" >&2
    echo "Use --help for usage information" >&2
    exit 1
    ;;
esac
